{"version":3,"sources":["webpack://gatsby-starter-default/./src/models/blog-post-query-data.ts","webpack://gatsby-starter-default/./src/templates/blog-post/blog-post.tsx","webpack://gatsby-starter-default/./src/templates/blog-post/models/blog-post-props-data.ts"],"names":["transformBlogPostQueryDataToBlogPost","data","author","node","name","firstName","lastName","avatar","url","uri","id","title","excerpt","date","content","featuredImage","src","localFile","alt","altText","BlogPost","post","previous","next","transformBlogPostPropsDataToPostDetailsProps","Container","maxWidth"],"mappings":"qIA8BO,SAASA,EACdC,GACU,gBACJC,EAAM,UAAGD,EAAKC,cAAR,aAAG,EAAaC,KAC5B,MAAO,CACLD,OAAQA,GAAU,CAChBE,KACEF,EAAOG,WAAaH,EAAOI,SACvBJ,EAAOG,UAAY,IAAMH,EAAOI,SAChCJ,EAAOE,KACbG,OAAQL,EAAOK,OAAOC,IACtBA,IAAKN,EAAOO,KAEdC,GAAIT,EAAKS,GACTC,MAAOV,EAAKU,MACZC,QAASX,EAAKW,QACdC,KAAMZ,EAAKY,KACXL,IAAKP,EAAKQ,IACVK,QAASb,EAAKa,QACdC,cAAe,CACbC,IAAG,UAAEf,EAAKc,qBAAP,iBAAE,EAAoBZ,YAAtB,iBAAE,EAA0Bc,iBAA5B,aAAE,EAAqCT,IAC1CU,IAAG,UAAEjB,EAAKc,qBAAP,iBAAE,EAAoBZ,YAAtB,aAAE,EAA0BgB,U,wMCrC9B,SAASC,EAAT,GAA2C,MCD3C,SACLnB,GAEA,MAAO,CACLoB,MAAMrB,OAAqCC,EAAKoB,MAChDC,SAAUrB,EAAKqB,UACXtB,OAAqCC,EAAKqB,UAC1C,KACJC,KAAMtB,EAAKsB,MAAOvB,OAAqCC,EAAKsB,MAAQ,MDNrCC,CADe,EAAvBvB,MACjBoB,EADwC,EACxCA,KAAMC,EADkC,EAClCA,SAAUC,EADwB,EACxBA,KAIxB,OACE,SAACE,EAAA,EAAD,CAAWC,SAAS,KAApB,UACE,SAAC,KAAD,CAAaL,KAAMA,EAAMC,SAAUA,EAAUC,KAAMA,MAKzD","file":"component---src-templates-blog-post-blog-post-tsx-44f85c3bc6964c3e1425.js","sourcesContent":["import { BlogPost } from '@nx-gatsby-blogs/ui';\n\nexport interface BlogPostQueryData {\n  author: {\n    node: {\n      firstName: string;\n      lastName: string;\n      name: string;\n      uri: string;\n      avatar: {\n        url: string;\n      };\n    };\n  };\n  id: string;\n  title: string;\n  excerpt: string;\n  date: string;\n  uri: string;\n  content: string;\n  featuredImage?: {\n    node: {\n      altText: string;\n      localFile: {\n        url: string;\n      };\n    };\n  };\n}\n\nexport function transformBlogPostQueryDataToBlogPost(\n  data: BlogPostQueryData\n): BlogPost {\n  const author = data.author?.node;\n  return {\n    author: author && {\n      name:\n        author.firstName && author.lastName\n          ? author.firstName + ' ' + author.lastName\n          : author.name,\n      avatar: author.avatar.url,\n      url: author.uri,\n    },\n    id: data.id,\n    title: data.title,\n    excerpt: data.excerpt,\n    date: data.date,\n    url: data.uri,\n    content: data.content,\n    featuredImage: {\n      src: data.featuredImage?.node?.localFile?.url,\n      alt: data.featuredImage?.node?.altText,\n    },\n  };\n}\n","import { Container } from '@material-ui/core';\nimport { PostDetails } from '@nx-gatsby-blogs/ui';\nimport { graphql } from 'gatsby';\nimport React from 'react';\n\nimport {\n  BlogPostPropsData,\n  transformBlogPostPropsDataToPostDetailsProps,\n} from './models/blog-post-props-data';\n\nexport interface BlogPostProps {\n  data: BlogPostPropsData;\n}\n\nexport function BlogPost({ data }: BlogPostProps) {\n  const { post, previous, next } = transformBlogPostPropsDataToPostDetailsProps(\n    data\n  );\n\n  return (\n    <Container maxWidth=\"md\">\n      <PostDetails post={post} previous={previous} next={next} />\n    </Container>\n  );\n}\n\nexport default BlogPost;\n\nexport const pageQuery = graphql`\n  query BlogPostById(\n    # these variables are passed in via createPage.pageContext in gatsby-node.js\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    # selecting the current post by id\n    post: wpPost(id: { eq: $id }) {\n      author {\n        node {\n          firstName\n          lastName\n          name\n          uri\n          avatar {\n            url\n          }\n        }\n      }\n      id\n      excerpt\n      content\n      title\n      date(formatString: \"MMMM DD, YYYY\")\n      featuredImage {\n        node {\n          altText\n          localFile {\n            url\n          }\n        }\n      }\n    }\n    # this gets us the previous post by id (if it exists)\n    previous: wpPost(id: { eq: $previousPostId }) {\n      author {\n        node {\n          firstName\n          lastName\n          name\n          uri\n          avatar {\n            url\n          }\n        }\n      }\n      id\n      excerpt\n      date(formatString: \"MMMM DD, YYYY\")\n      title\n      uri\n      featuredImage {\n        node {\n          altText\n          localFile {\n            url\n          }\n        }\n      }\n    }\n    # this gets us the next post by id (if it exists)\n    next: wpPost(id: { eq: $nextPostId }) {\n      author {\n        node {\n          firstName\n          lastName\n          name\n          uri\n          avatar {\n            url\n          }\n        }\n      }\n      id\n      excerpt\n      date(formatString: \"MMMM DD, YYYY\")\n      title\n      uri\n      featuredImage {\n        node {\n          altText\n          localFile {\n            url\n          }\n        }\n      }\n    }\n  }\n`;\n","import { PostDetailsProps } from '@nx-gatsby-blogs/ui';\n\nimport {\n  BlogPostQueryData,\n  transformBlogPostQueryDataToBlogPost,\n} from '../../../models/blog-post-query-data';\n\nexport interface BlogPostPropsData {\n  post: BlogPostQueryData;\n  previous?: BlogPostQueryData;\n  next?: BlogPostQueryData;\n}\n\nexport function transformBlogPostPropsDataToPostDetailsProps(\n  data: BlogPostPropsData\n): PostDetailsProps {\n  return {\n    post: transformBlogPostQueryDataToBlogPost(data.post),\n    previous: data.previous\n      ? transformBlogPostQueryDataToBlogPost(data.previous)\n      : null,\n    next: data.next ? transformBlogPostQueryDataToBlogPost(data.next) : null,\n  };\n}\n"],"sourceRoot":""}